clear
ls
l
ls
pwd
getwd()
x <- 5
x
x <- 1:5
x
class(x)
as.numeric(x)
as.logical(x)
install.packages("KernSmooth")
library (KernSmooth)
x
x
x <- vector("numeric", length = 10)
> x <- vector("numeric", length = 10)
x
x <- vector("numeric", length = 10)
x
dir
dfvdv
cscs
getwd()
setwd(C:\Users\Cedric\Documents\GitHub\datascience)
setwd(C:/Users/Cedric/Documents/GitHub/datascience)
getwd()
setwd("C:/Users/Cedric/Documents/GitHub/datascience")
getwd()
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
x
x <- c("a", "b", "c")
as.numeric(x)
x <- list(1, "a", TRUE, 1 + 4i)
x
x[[1]]
x[[1]]
x[[1]][1]
y <- c(1:6)
y
y <- c(1:6, dim=2)
y
m <- matrix(1:6,2,3)
m
x
x <- c(1;6)
x
x <- c(1:6)
x
x[1]
x[1:3]
x[1,4]
x[x>3]
y <- 6:9
y [y==8]
y [y>8]
y [y>=8]
install.packages("swirl")
library("swirl")
swirl()
}
for (i in 1:10) print (i)
for (i in 1:10) print (i)
search()
y <- 10
y <- 10
y <- 10
5+7
y <-10
y
f <- function {}
y*y +g(x)
f(3)
y <-10
f <- function(x) {
y <- 2
y*y +g(x)
}
f(3)
y <-10
f <- function(x) {
y <- 2
y*y +g(x)
}
f(3)
g <- function(x){
x*y
}
f(3)
y
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x <- as.date ("2015-03-26")
x <- is.date ("2015-03-26")
x <- is.Date ("2015-03-26")
x <- as.Date ("2015-03-26")
x
unclass (x)
months(x)
quarters(x)
days(x)
dates(x)
weekdatys(x)
weekdays(x)
POSIXct(x)
syst.time()
sys.time()
x <- sys.time()
x <- Sys.time()
x
x
x$sec
p <- is.POXISlt(x)
p <- as.POXISlt(x)
p <- as.POSIXlt(x)
p$sec
p
p$month
unclass(p)
names (unclass(x))
names(unclass(p))
p
x
class(x)
class(p)
as.POSIXlt(x)
x
x$sec
as.POSXlt(x)
as.POSIXlt(x)
x-y
x-p
x <- as.POSIXlt(x)
x
x-y
x <- as.POSIXct(x)
x
x-y
swirl()
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
letters[1:4]
z*2+100
my_sqrt <- sqrt (z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
getwd()
ls()
<- 9
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- list.files()
old.dir <- getwd()
dir.creat(testdir)
dir.create (testdir)
dir.create("testdir")
dir.create()
# Change directory you want to use
set("testdir")
setwd("testdir")
dir.create()
file.create("mytest.R")
ls()
dir()
list.files()
file.exist("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path('mytest3.R')
file.remove('mytest.R')
file.path("folder1", "folder2")
?dir.create
dir.create(testdir2, testdir2/testdir3, recursive = TRUE)
dir.create(filepath(), testdir2, recursive = TRUE)
dir.create(file.path(), testdir2, recursive = TRUE)
dir.create(file.path(), 'testdir2', 'testdir3', recursive - TRUE)
dir.create(file.path(), 'testdir2', 'testdir3', recursive = TRUE)
dir.create('testdir2')
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
play()
file.path('testdir2')
file.path('testdir3')
getwd()
ls()
list.files()
list.files('testdir2')
getwd()
file.path('testdir2', 'testdir3')
file.path('testdir3')
file.path("folder1", "folder2")
nxt()
unlink('testdir2')
unlink('testdir2', recursive = TRUE)
setwd()
setwd("C:/Users/Cedric/Documents/GitHub/datascience")
setwd(old.dir)
unlink('testdir')
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1?
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, lenght=30)
my_seq <- seq(5, 10, length=30)
seq(5, 10, length=30)
# get length of a vector
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
# Double quotes are used to distinguish character objects => "My"
paste(my_char, collapse = " ")
paste(c("My", "name", "is"), collapse = " ")
# To add (or 'concatenate') charatcer to the end
my_name < c(my_char, "cedric")
my_name <- c(my_char, "cedric")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
# join the elements of multiple character vectors with paste ()
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(4, NA, 5, NA)
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my-na <- is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
inf/inf
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
# add column
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, colnames)
colnames(my_data) <- cnames
my_ata
my_data
TRUE == TRUE
(FALSE == TRUE) == FALS
(FALSE == TRUE) == FALSE
6 == 7
6,7
6<7
10 <= 10
5 != 7
5 == 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- ample(10)
ints <- sample(10)
ints
ints > 5
which (ints)
which (ints>7)
any(ints<0) # see if any of the elements of ints are less than zero
all(ints>0) # see if any of the elements of ints are less than zero
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
ssubmit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){[[1]]},c(8, 4, 0))
evaluate(function(x){x[[1]]},c(8, 4, 0))
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[3]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("aalo grand manitou")
submit()
submit
submit()
submit()
submit()
mad_libs("paris", "great", "Sorbonne")
mad_libs(place = "paris", adjective = "great", noun = "Sorbonne")
mad_libs(c(place = "paris", adjective = "great", noun = "Sorbonne"))
submit()
nxt()
submit()
submit()
submit()
mad_libs(c(place = "paris", adjective = "great", noun = "Sorbonne"))
play()
mad_libs(place = "paris", adjective = "great", noun = "Sorbonne")
nxt()
submit()
I %p% love %p% R!
"I" %p% "love" %p% "R!"
