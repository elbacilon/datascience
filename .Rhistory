ncol(plants
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
View(plants)
tail(plants) # return last 15 rows
tail(plants, 15) # return last 15 rows
summary(plants)
# For categorical variables R truncated the summary for Active_Growth_Period by including a catch-all category called 'Other'
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS) # permute all 26 letters of the English alphabet
sample (c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
sample (c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(c(0,1), 100, prob = c(0.7, 0.7))
flips2 <- sample(c(0,1), 100, replace = TRUE, prob = c(0.7, 0.7))
flips2 <- rbinom(100, size = 1, prob = 0,7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnom(10, mean = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
>rpois
?rpois
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
play()
cm
nxt()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01"
`d2 <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(d1)
months(t1)
quarters(t2) # the quarter from any date or time object
strptime("October 17, 1986, 08:24")
t3 <- "October 17, 1986, 08:24"
t3 <- ("October 17, 1986, 08:24")
info()
t3 <- "October 17, 1986, 08:24"
skip()
strptime("October 17, 1986 08:24", "%B %d, %Y %H:%M")
t4 <- strptime("October 17, 1986 08:24", "%B %d, %Y %H:%M")
skip()
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
?data
data(cars)
?cars
head(cars)
di(cars)
dim(cars)
dim(cars)
names(cars)
tail(cars)
summary(cars)
str(cars)
str(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist, type = b)
plot(x = cars$speed, y = cars$dist, type = "b")
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, xlab = "Speed", ylab = "Stopping Distance", Title = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
head(cars)
head(mtcars)
dim(mtcars)
names(mtcars)
tail(mtcars)
summary(mtcars)
?bloxplot
?boxplot
bloxplot(mpg ~ cyl)
boxplots(mpg ~ cyl)
boxplot(mpg ~ cyl)
boxplot(mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(XML)
install.packages("XML")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmTreeParse(fileUrl, useInternal = TRUE)
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
view(doc)
rootNode <- xmlRoot(doc) # wraper of the doc elements
xmlName(rootNode) # return Breakfast menu
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_40')
library(xlsx)
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
library(rJava)
library(xlsxjars)
library(xlsx)
cameraData <- read.xlsx("./cameras.csv", sheetIndex = 1, colIndex=colIndex, rowIndex=rowIndex )
fileUrl <- "http://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.xlsx")
dateDownloaded <- date() # set date of the download
cameraData <- read.xlsx("./cameras.csv", sheetIndex = 1, colIndex=colIndex, rowIndex=rowIndex )
getwd()
setwd("C:/Users/Cedric/Documents/GitHub/datascience")
fileUrl <- "http://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.csv")
dateDownloaded <- date() # set date of the download
# Reading local file read.table(). read.csv(), read.csv2()
cameraData <- read.table("./cameras.csv", sep = ",", header = TRUE )
fileUrl <- "http://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.xlsx")
dateDownloaded <- date() # set date of the download
cameraData <- read.xlsx("./cameras.xlsx", sheetIndex = 1, colIndex=colIndex, rowIndex=rowIndex )
head(cameraData)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue) # li=list
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
scores <- xpathSApply(doc, "//li[@class='scoring']", xmlValue) # if li=list & class=scrore return value
scores
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue) # if li=list & class=scrore return value
scores
teams
teams
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
fileUrl <- "http://espn.go.com/nba/team/_/name/bos/boston-celtics"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue) # if li=list & class=scrore return value
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
fileUrl <- "http://espn.go.com/nba/team/_/name/bos/boston-celtics"
fileUrl <- "http://espn.go.com/nba/team/schedule/_/name/bos"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue) # if li=list & class=scrore return value
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
?xpathSApply
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse ( fileUrl, useInternal=TRUE)
scores <- xpathSApply (doc, "//li[@class='score']", xmlValue )
scores <- xpathSApply (doc, "//li[@class='team-name']", xmlValue )
scores
teams
fileUrl <- "http://espn.go.com/nba/team/schedule/_/name/bos"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc) # wraper elements of the entire doc
xmlName(rootNode) # return element of the XML file => Breakfast menu
names(rootNode) # name of the root nodes
xmlSApply(rootNode, xmlValue) # extract only text of the XML
xpathSApply(rootNode, "//name", xmlValue) # take out all node corresponding with element tag with "name"
fileUrl <- "http://espn.go.com/nba/team/schedule/_/name/bos"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue) # if li=list & class=scrore return value
scores
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
teams
read("fileUrl")
print("fileUrl")
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue) # if li=list & class=scrore return value
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
teams <- xpathSApply(doc, "//li[@class="team-name""]", xmlValue)
teams <- xpathSApply(doc, "//li[@class="team-name"]", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name'']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
teams
fileUrl <- "http://espn.go.com/nba/team/schedule/_/name/bos"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue) # if li=list & class=scrore return value
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
fileUrl <- "http://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.xlsx")
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.xlsx")
dateDownloaded <- date() # set date of the download
library(rJava)
library(xlsxjars)
library(xlsx)
cameraData <- read.xlsx("./cameras.xlsx", sheetIndex = 1, colIndex=colIndex, rowIndex=rowIndex )
fileUrl <- "https://data.baltimorecity.gov/api/views/e7gh-hui5/rows.xlsx?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.xlsx")
dateDownloaded <- date() # set date of the download
cameraData <- read.xlsx("./cameras.xlsx", sheetIndex = 1, colIndex=colIndex, rowIndex=rowIndex )
cameraData <- read.xlsx("./cameras.xlsx", 1)
?read.xlsx
library(xlsx)
cameraData <- read.xlsx("./cameras.xlsx", sheetIndex = 1, colIndex=colIndex, rowIndex=rowIndex )
cameraData <- read.xlsx("./cameras.xlsx", sheetIndex = 1)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.xlsx", mode='wb')
dateDownloaded <- date() # set date of the download
cameraData <- read.xlsx("./cameras.xlsx", sheetIndex = 1)
head(cameraData)
install.packages("gdata")
# library(gdata)
?require
?read.xls
?read.xls
??read.xls
cameraData <- read.xls("./cameras.xlsx", sheet = 1, header = TRUE)
library(gdata)
?read.xls
cameraData <- read.xls("./cameras.xlsx", sheet = 1, header = TRUE)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.xls", mode='wb')
dateDownloaded <- date() # set date of the download
cameraData <- read.xls("./cameras.xls", sheet = 1, header = TRUE)
cameraData <- read.xls("./cameras.xls", sheet = 1, header = TRUE, perl="perl")
cameraData <- read.xls("./cameras.xls", sheet = 1, header = TRUE, perl="perl", verbose=FALSE)
install.package("jsonlite")
install.packages("jsonlite")
library(jsonlite)
jsonData <- fronJSON("https://api.github/users/jtleek/repos")
jsonData <- fromJSON("https://api.github/users/jtleek/repos")
install.packages("curl")
library(curl)
jsonData <- fromJSON("https://api.github/users/jtleek/repos")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file (fileUrl, destfile = "./cameras.xls", mode='wb')
dateDownloaded <- date() # set date of the download
read.xls ("./cameras.xls"), sheet = 1, header = TRUE)
read.xls ("./cameras.xls", sheet = 1, header = TRUE)
install.packages("gdata")
read.xls ("./cameras.xls", sheet = 1, header = TRUE)
library(gdata)
read.xls ("./cameras.xls", sheet = 1, header = TRUE)
names(jsonData$owner)
names(jsonData$owner$login)
View(jsonData)
View(jsonData)
names(jsonData)
jsonData$owner$login
?cat
cat(myjson)
myjson <- toJSON(itis, pretty = TRUE)
install.packages("jsonlite")
myjson <- toJSON(iris, pretty = TRUE)
library(curl)
library(jsonlite)
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
install.packages("data.table")
library (data.table)
DF <- data.table(x=rnorm(9),y=rep(c("a","b","c"), each = 3), z=rnorm(9))
head(DF,3)
DF <- data.frame(x=rnorm(9),y=rep(c("a","b","c"), each = 3), z=rnorm(9))
head(DF,3)
DT <- data.table(x=rnorm(9),y=rep(c("a","b","c"), each = 3), z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[2]
DT[DT$y="a",]
DT[DT$y=="a",]
DT[c(2,3)]
DT[DT$y=="a"]
DT[,c(2,3)]
k <- {print(10), 5}
k <- {print(10); 5}
print(k)
k
DT[,table(y)]
DT[,list(mean(x), sum(z))]
DT[,w:=z*z]
DT
DT2[, y:=2]
DT2 <- DT
DT2[, y:=2]
DT[, y:=2]
DT
DT <- data.table(x=rnorm(9),y=rep(c("a","b","c"), each = 3), z=rnorm(9))
DT[,table(y)]
DT[,w:=z*z]
DT2 <- DT
DT[, y:=2]
DT
DT2
DT2 <- DT
DT2
DT <- data.table(x=rnorm(9),y=rep(c("a","b","c"), each = 3), z=rnorm(9))
DT
DT[,w:=z*z]
DT2 <- DT
DT2
DT[, y:=2]
DT2
DT[,m := {tmp <- (x+y); log2(tmp+5)}]
DT[,m := {tmp <- (x+z); log2(tmp+5)}]
DT
DT[,a := x>0]
DT
DT[,b := mean(x+w), by=a]
DT
set.seed(123)
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
DT <- data.table(x=rep(c("a","b","c"), each = 100), y - rnorm (300))
DT <- data.table(x=rep(c("a","b","c"), each = 100), y = rnorm (300))
setKey(DT, x)
setkey(DT, x)
DT['a']
DT1 <- data.table(x=c("a","b","c"), y=1:4)
DT1 <- data.table(x=c("a","b","c", "dt1"), y=1:4)
DT2 <- data.table(x=c("a","b","dt2"), z=5:7)
setkey(DT1,x); stkey(DT2, x)
setkey(DT1,x); setkey(DT2, x)
merge(DT1, DT2)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file (fileUrl, destfile = "./idahoHousing.csv")
dateDownloaded <- date()
idahoHousingData <- read.table("./idahoHousing.csv", sep = ",", header = TRUE )
DT <- data.table(idahoHousingData)
header(DT)
head(DT)
DT[,table(VAL)]
DT[, .N, by=VAL]
DT[,DT$VAL >= 24]
DT[, sum(!is.na(DT$VAL >= 24))]
!
DT[, sum(!is.na(DT$VAL = 24))]
DT[,table(VAL)]
DT[, sum(!is.na(DT$VAL = 24))]
DT[, sum(!is.na(DT$VAL == 24))]
DT[, sum(is.na(DT$VAL == 24))]
sum(is.na(DT$VAL == 24)
sum(is.na(DT$VAL == 24))
summary(DT)
summary(DT$FES)
head(DT$FES)
head(DT$FES, 10)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file (fileUrl, destfile = "./naturalgasacquisition.xlsx", mode='wb')
dateDownloaded <- date() # set date of the download
gasData <- read.xlsx("./naturalgasacquisition.xlsx.xlsx", sheetIndex = 1)
install.packages("xlsx")
library(xlsx)
install.packages("rJava", "xlsxjars", "xlsx")
install.packages("rJava", "xlsxjars", "xlsx")
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_40')
library(rJava)
library(xlsxjars)
library(xlsx)
gasData <- read.xlsx("./naturalgasacquisition.xlsx", sheetIndex = 1)
head(cameraData)
head(gasData)
DT <- data.table(gasData)
install.packages("data.table")
library (data.table)
DT <- data.table(gasData)
DT[,7:15]
DT[,7:15, , with=FALSE]
DT[18:23, 7:15, , with=FALSE]
DT[18:23, 7, , with=FALSE]
DT[18:23, 7, with=FALSE]
DT[18:23, 7:8, with=FALSE]
DT[18:23, 7:9, with=FALSE]
DT[,7]
DT[,(7)]
DT[,{7}]
DT[18:23, 7:9, with=FALSE]
dat <- DT[18:23, 7:9, with=FALSE]
head(dat)
dat <- DT[18:23, 7:15, with=FALSE]
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
head(gasData,1)
View(gasData)
gasData <- read.xlsx("./naturalgasacquisition.xlsx", sheetIndex = 1)
head(gasData)
gasData <- read.xlsx("./naturalgasacquisition.xlsx", sheetIndex = 1, skip = 17, nrows = 6)
head(gasData)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file (fileUrl, destfile = "./naturalgasacquisition.xlsx", mode='wb')
dateDownloaded <- date() # set date of the download
?read.xlsx
gasData <- read.xlsx("./naturalgasacquisition.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
head(gasData)
sum(dat$Zip*dat$Ext,na.rm=T)
dat$Zip
head(dat)
dat <- read.xlsx("./naturalgasacquisition.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data <- xmlTreeParse(fileUrl, useInternal = TRUE)
data <- xmlTreeParse(fileUrl, useInternal = TRUE)
?xmlTree{Parse
?xmlTreeParse
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file (fileUrl, destfile = "./baltimorerestaurants.xml")
data <- xmlTreeParse("./baltimorerestaurants.xml", useInternal = TRUE)
names(data)
data <- xmlNativeTreeParse("./baltimorerestaurants.xml", useInternal = TRUE)
names(data)
?xmlNativeTreeParse
data <- xmlNativeTreeParse("./baltimorerestaurants.xml")
names(data)
rootNode <- xmlRoot(data) # wraper elements of the entire doc
xmlName(rootNode) # return element of the XML file => Breakfast menu
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
names(rootNode)
xpathSApply(rootNode, "//zipcode", xmlValue) # extract zipcode
names(rootNode)
is.na(xpathSApply(rootNode, "//zipcode", xmlValue)) # extract zipcode
is.na(xpathSApply(rootNode, "//zipcode", xmlValue) == 21231) # extract zipcode
is.na(xpathSApply(rootNode, "//zipcode", xmlValue) == "21231") # extract zipcode
sum(is.na(xpathSApply(rootNode, "//zipcode", xmlValue) == "21231"))
sum(is.na(xpathSApply(rootNode, "//zipcode", xmlValue) == 21231))
sum(is.na(xpathSApply(rootNode, "//zipcode", xmlValue == 21231))
sum(xpathSApply(rootNode, "//zipcode", xmlValue))
sum(xpathSApply(rootNode, "//zipcode", xmlValue))
xpathSApply(rootNode, "//zipcode", xmlValue)
sum(is.na(xpathSApply(rootNode, "//zipcode", xmlValue)))
sum(!is.na(xpathSApply(rootNode, "//zipcode", xmlValue)))
zipcode <- xpathSApply(rootNode, "//zipcode", xmlValue)
zipcode = 21231
zipcode <- xpathSApply(rootNode, "//zipcode", xmlValue)
zipcode[zipcode = 21231]
zipcode[zipcode == 21231]
sum(zipcode[zipcode == 21231])
?count
zipcode21231 <- zipcode[if zipcode == 21231, 1, 0]
summary(zipcode[zipcode == 21231])
length(zipcode[zipcode == 21231]
length(zipcode[zipcode == 21231])
?fread
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile= "./idahohousing.csv")
idahohousingData <- fread("./idahohousing.csv", sep = ",", header = TRUE )
DT <- data.table(fread("./idahohousing.csv", sep = ",", header = TRUE ))
header(DT)
head(DT,3)
DT[, mean(pwgtp15), by=SEX]
