if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- cor(y$sulfate, y$nitrate)
x <- c(x, z)
}
}
if (x == NULL) {
0
} elses {
x
}
}
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- cor(y$sulfate, y$nitrate)
x <- c(x, z)
}
}
if (x == NULL) {
0
} else {
x
}
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- cor(y$sulfate, y$nitrate)
x <- c(x, z)
}
}
}
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata",)
head(cr)
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- cor(y$sulfate, y$nitrate)
x <- c(x, z)
}
}
print(x)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- arr(cor(y$sulfate, y$nitrate), 5)
x <- c(x, z)
}
}
x
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- round(cor(y$sulfate, y$nitrate), 5)
x <- c(x, z)
}
}
x
}
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 400)
head(cr)
summary (cr)
cr <- corr("specdata", 5000)
summary(cr)
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- round(cor(y$sulfate, y$nitrate), 5)
x <- c(x, z)
}
}
if (is.NULL(x)) {
x <- 0
}
x
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- round(cor(y$sulfate, y$nitrate), 5)
x <- c(x, z)
}
}
if (is.null(x)) {
x <- 0
}
x
}
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 5000)
summary(cr)
x <- 0
summary(x)
x <- NULL
summary(x)
class(x)
x <- 0
class(x)
is.vector(x)
summary(x)
cr <- corr("specdata", 5000)
head(cr)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- cor(y$sulfate, y$nitrate), 5
x <- c(x, z)
}
}
if (is.null(x)) {
x <- 0
}
x
}
z <- cor(y$sulfate, y$nitrate)
corr <- function(directory, threshold = 0) {
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
files_full <- list.files(directory, pattern="*.csv", full.names = TRUE)
x <- vector()  # set empty vector
y <- data.frame() # set empty data.frame
for (i in 1:332) {
y <- read.csv(files_full[i]) # create a data.frame with all data from files
if (sum(complete.cases(y)) > threshold) { # thresold condition on complete case
y <- y[complete.cases(y),] # keep monitor with complete case below thresold
z <- cor(y$sulfate, y$nitrate)
x <- c(x, z)
}
}
if (is.null(x)) {
x <- 0
}
x
}
cr <- corr("specdata", 150)
head(cr)
submit()
submit()
submit()
rm(list = ls())
library("swirl")
install.packages("swirl")
library("swirl")
swirl()
swirl()
library("swirl")
swirl()
swirl()
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- y-3
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 55, z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / mysqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("./testdir")
setwd("testdir")
setwd("testdir")
getwd()
setwd("testdir")
setewd( "./")
setwd("./")
getwd()
setwd(.)
setwd("./")
setwd("C:/Users/Cedric/Documents/GitHub/datascience/R_programming/")
getwd()
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
copy("mytest2.R", "mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
rm("testdir")
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?now
?':'
seq(1, 20)
seq(0, 10, by=0.5
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
vector num_vect <- c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vec < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "cedric")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <-  c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix, patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("cedric")
submit()
mad_libs(place = "paris", adjective = "great", noun = "Sorbonne")
submit()
submit()
next
"%mult_add_one%" <- function(left, right){ # Notice the quotation marks!
left * right + 1
}
submit()
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_list <- sapply(flags, class)
cls_vect <- sapply(flages, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors, 6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
next
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
>sample
?sample
